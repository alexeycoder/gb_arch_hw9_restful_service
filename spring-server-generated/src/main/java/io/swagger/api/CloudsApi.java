/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.62).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Cloud;
import io.swagger.model.Clouds;
import io.swagger.model.Error;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-09-20T16:15:31.919070397Z[GMT]")
@Validated
public interface CloudsApi {

    @Operation(summary = "Добавление заказа ресурсов в облаке", description = "Добавление заказа ресурсов в облаке", tags={ "Clouds" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Успешный заказ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cloud.class))),
        
        @ApiResponse(responseCode = "200", description = "Прочие ответы", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/clouds",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Cloud> addCloud(@Parameter(in = ParameterIn.DEFAULT, description = "Размещает заказ на выделение новых ресурсов в облаке", schema=@Schema()) @Valid @RequestBody Cloud body
);


    @Operation(summary = "Отмена заказа по ID", description = "", tags={ "Clouds" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Успешная отмена заказа по ID"),
        
        @ApiResponse(responseCode = "400", description = "Предоставлен некорректный идентификатор", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Заказ не найден", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "200", description = "Прочие ответы", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/clouds/{cloud_id}",
        produces = { "application/problem+json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> cancelCloudById(@Parameter(in = ParameterIn.PATH, description = "Идентификатор заказа в облаке", required=true, schema=@Schema()) @PathVariable("cloud_id") UUID cloudId
);


    @Operation(summary = "Список ресурсов в облаке", description = "Возвращает список всех имеющихся у пользователя ресурсов в облаке", tags={ "Clouds" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Успешный ответ со списком ресурсов", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Clouds.class))),
        
        @ApiResponse(responseCode = "200", description = "Прочие ответы", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/clouds",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Clouds> getAllClouds();


    @Operation(summary = "Поиск заказа по ID", description = "", tags={ "Clouds" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Успешный ответ с заказом", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cloud.class))),
        
        @ApiResponse(responseCode = "400", description = "Предоставлен некорректный идентификатор", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Заказ не найден", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "200", description = "Прочие ответы", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/clouds/{cloud_id}",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Cloud> getCloud(@Parameter(in = ParameterIn.PATH, description = "Идентификатор заказа в облаке", required=true, schema=@Schema()) @PathVariable("cloud_id") UUID cloudId
);

}

